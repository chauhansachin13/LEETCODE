
# Code
```

# //# **SOLUTION 1:**
class Solution {
     
       

public ListNode reverseList(ListNode head) {

ListNode Prev=null;
ListNode Next=head;
ListNode temp1=head;
 

while(temp1!=null)
{
     temp1=Next.next;
    Next.next=Prev;
    Prev=Next;
    Next=temp1;


}



return Prev;


    }


    public static ListNode CopyList(ListNode head) {

        ListNode newhead = new ListNode(head.val);

        ListNode ptr1 = head.next;
        ListNode ptr2 = newhead;

        while (ptr1!= null) {
            ListNode newnode = new ListNode(ptr1.val);
            ptr2.next = newnode;
            ptr1 = ptr1.next;
            ptr2=ptr2.next;
        }
        return newhead;
    }
    public boolean isPalindrome(ListNode head) {

ListNode newh = CopyList(head);

        head = reverseList(head);





        
        

    ListNode ptr1=head;
     ListNode ptr2=newh;
        while(ptr1!=null)
        {
 if(ptr1.val!=ptr2.val)
 return false;

 else
 {
    ptr1=ptr1.next;
        ptr2=ptr2.next;
 }



        }
return true;
    }
}


# //# **SOLUTION 2:**

class Solution {

    static ListNode findMiddle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    static ListNode reverseLinkedList(ListNode head) {
        if (head == null || head.next == null)
            return head;
        ListNode prev = head;
        ListNode cur = head.next;
        head.next = null;

        while (cur != null) {
            ListNode next = cur.next;
            cur.next = prev;
            prev = cur;
            cur = next;
        }

        return prev;
    }

    public boolean isPalindrome(ListNode head) {
        ListNode middle = findMiddle(head);
        ListNode t2 = reverseLinkedList(middle);
        ListNode t1 = head;

        while (t2 != null) {
            if (t1.val != t2.val) {
                return false;
            }
            t1 = t1.next;
            t2 = t2.next;
        }
        return true;
    }
}


```
